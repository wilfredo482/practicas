{"version":3,"file":"utils.js","names":["HtpasswdHashAlgorithm","lockAndRead","name","cb","readFile","lock","err","res","parseHTPasswd","input","split","reduce","result","line","args","map","str","trim","length","verifyPassword","passwd","hash","match","Promise","resolve","reject","bcrypt","compare","error","indexOf","slice","crypto","createHash","update","digest","md5","crypt3","generateHtpasswdLine","user","hashConfig","algorithm","hashSync","rounds","crypt","sha1","createError","comment","Date","toJSON","addUserToHTPasswd","body","encodeURIComponent","status","newline","sanityCheck","password","verifyFn","users","maxUsers","Error","auth","Object","keys","changePasswordToHTPasswd","newPasswd","lines","userLineIndex","findIndex","shift","username","passwordValid","updatedUserLine","splice","join"],"sources":["../src/utils.ts"],"sourcesContent":["import crypto from 'crypto';\n\nimport md5 from 'apache-md5';\nimport bcrypt from 'bcryptjs';\nimport createError, { HttpError } from 'http-errors';\nimport { readFile } from '@verdaccio/file-locking';\nimport { Callback } from '@verdaccio/types';\n\nimport crypt3 from './crypt3';\n\nexport enum HtpasswdHashAlgorithm {\n  md5 = 'md5',\n  sha1 = 'sha1',\n  crypt = 'crypt',\n  bcrypt = 'bcrypt',\n}\n\nexport interface HtpasswdHashConfig {\n  algorithm: HtpasswdHashAlgorithm;\n  rounds?: number;\n}\n\n// this function neither unlocks file nor closes it\n// it'll have to be done manually later\nexport function lockAndRead(name: string, cb: Callback): void {\n  readFile(name, { lock: true }, (err, res) => {\n    if (err) {\n      return cb(err);\n    }\n\n    return cb(null, res);\n  });\n}\n\n/**\n * parseHTPasswd - convert htpasswd lines to object.\n * @param {string} input\n * @returns {object}\n */\nexport function parseHTPasswd(input: string): Record<string, any> {\n  // The input is split on line ending styles that are both windows and unix compatible\n  return input.split(/[\\r]?[\\n]/).reduce((result, line) => {\n    const args = line.split(':', 3).map((str) => str.trim());\n    if (args.length > 1) {\n      result[args[0]] = args[1];\n    }\n    return result;\n  }, {});\n}\n\n/**\n * verifyPassword - matches password and it's hash.\n * @param {string} passwd\n * @param {string} hash\n * @returns {Promise<boolean>}\n */\nexport async function verifyPassword(passwd: string, hash: string): Promise<boolean> {\n  if (hash.match(/^\\$2([aby])\\$/)) {\n    return new Promise((resolve, reject) =>\n      bcrypt.compare(passwd, hash, (error, result) => (error ? reject(error) : resolve(result)))\n    );\n  } else if (hash.indexOf('{PLAIN}') === 0) {\n    return passwd === hash.slice(7);\n  } else if (hash.indexOf('{SHA}') === 0) {\n    return (\n      crypto\n        .createHash('sha1')\n        // https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding\n        .update(passwd, 'utf8')\n        .digest('base64') === hash.slice(5)\n    );\n  }\n  // for backwards compatibility, first check md5 then check crypt3\n  return md5(passwd, hash) === hash || crypt3(passwd, hash) === hash;\n}\n\n/**\n * generateHtpasswdLine - generates line for htpasswd file.\n * @param {string} user\n * @param {string} passwd\n * @param {HtpasswdHashConfig} hashConfig\n * @returns {string}\n */\nexport function generateHtpasswdLine(\n  user: string,\n  passwd: string,\n  hashConfig: HtpasswdHashConfig\n): string {\n  let hash: string;\n\n  switch (hashConfig.algorithm) {\n    case HtpasswdHashAlgorithm.bcrypt:\n      hash = bcrypt.hashSync(passwd, hashConfig.rounds);\n      break;\n    case HtpasswdHashAlgorithm.crypt:\n      hash = crypt3(passwd);\n      break;\n    case HtpasswdHashAlgorithm.md5:\n      hash = md5(passwd);\n      break;\n    case HtpasswdHashAlgorithm.sha1:\n      hash = '{SHA}' + crypto.createHash('sha1').update(passwd, 'utf8').digest('base64');\n      break;\n    default:\n      throw createError('Unexpected hash algorithm');\n  }\n\n  const comment = 'autocreated ' + new Date().toJSON();\n  return `${user}:${hash}:${comment}\\n`;\n}\n\n/**\n * addUserToHTPasswd - Generate a htpasswd format for .htpasswd\n * @param {string} body\n * @param {string} user\n * @param {string} passwd\n * @returns {string}\n */\nexport function addUserToHTPasswd(\n  body: string,\n  user: string,\n  passwd: string,\n  hashConfig: HtpasswdHashConfig\n): string {\n  if (user !== encodeURIComponent(user)) {\n    const err = createError('username should not contain non-uri-safe characters');\n\n    err.status = 409;\n    throw err;\n  }\n\n  let newline = generateHtpasswdLine(user, passwd, hashConfig);\n\n  if (body.length && body[body.length - 1] !== '\\n') {\n    newline = '\\n' + newline;\n  }\n  return body + newline;\n}\n\n/**\n * Sanity check for a user\n * @param {string} user\n * @param {object} users\n * @param {string} password\n * @param {Callback} verifyFn\n * @param {number} maxUsers\n * @returns {object}\n */\nexport async function sanityCheck(\n  user: string,\n  password: string,\n  verifyFn: Callback,\n  users: {},\n  maxUsers: number\n): Promise<HttpError | null> {\n  let err;\n\n  // check for user or password\n  if (!user || !password) {\n    err = Error('username and password is required');\n    err.status = 400;\n    return err;\n  }\n\n  const hash = users[user];\n\n  if (maxUsers < 0) {\n    err = Error('user registration disabled');\n    err.status = 409;\n    return err;\n  }\n\n  if (hash) {\n    const auth = await verifyFn(password, users[user]);\n    if (auth) {\n      err = Error('username is already registered');\n      err.status = 409;\n      return err;\n    }\n    err = Error('unauthorized access');\n    err.status = 401;\n    return err;\n  } else if (Object.keys(users).length >= maxUsers) {\n    err = Error('maximum amount of users reached');\n    err.status = 403;\n    return err;\n  }\n\n  return null;\n}\n\n/**\n * changePasswordToHTPasswd - change password for existing user\n * @param {string} body\n * @param {string} user\n * @param {string} passwd\n * @param {string} newPasswd\n * @param {HtpasswdHashConfig} hashConfig\n * @returns {string}\n */\nexport async function changePasswordToHTPasswd(\n  body: string,\n  user: string,\n  passwd: string,\n  newPasswd: string,\n  hashConfig: HtpasswdHashConfig\n): Promise<string> {\n  let lines = body.split('\\n');\n  const userLineIndex = lines.findIndex((line) => line.split(':', 1).shift() === user);\n  if (userLineIndex === -1) {\n    throw new Error(`Unable to change password for user '${user}': user does not currently exist`);\n  }\n  const [username, hash] = lines[userLineIndex].split(':', 2);\n  const passwordValid = await verifyPassword(passwd, hash);\n  if (!passwordValid) {\n    throw new Error(`Unable to change password for user '${user}': invalid old password`);\n  }\n  const updatedUserLine = generateHtpasswdLine(username, newPasswd, hashConfig);\n  lines.splice(userLineIndex, 1, updatedUserLine);\n  return lines.join('\\n');\n}\n"],"mappings":"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"}